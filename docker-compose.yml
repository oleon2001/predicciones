version: '3.8'

services:
  # Servicio principal de trading
  trading-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-trading-system
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./resultados:/app/resultados
      - ./graficos:/app/graficos
      - ./modelos:/app/modelos
    environment:
      - LOG_LEVEL=INFO
      - CACHE_ENABLED=true
      - PARALLEL_PROCESSING=true
      - MAX_WORKERS=4
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://trading_user:secure_password@postgres:5432/crypto_trading
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL para datos persistentes
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crypto_trading
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d crypto_trading"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - trading-network
    profiles:
      - monitoring

  # Nginx para reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading-system
    networks:
      - trading-network
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge 