#!/usr/bin/env python3
"""
SISTEMA INTEGRADO DE AN√ÅLISIS Y PREDICCI√ìN DE CRIPTOMONEDAS
========================================================

Combina an√°lisis t√©cnico tradicional con machine learning avanzado
Desarrollado por: AI Expert Developer & Economist

Caracter√≠sticas:
- An√°lisis t√©cnico completo con 30+ indicadores
- Modelos de Machine Learning (Random Forest, XGBoost, LSTM)
- Predicciones a m√∫ltiples horizontes temporales
- An√°lisis de sentimientos avanzado
- Detecci√≥n de patrones chartistas
- Backtesting autom√°tico
- Sistema de scoring predictivo
- Reportes detallados con visualizaciones

ADVERTENCIA: Este sistema es para fines educativos y an√°lisis.
NO constituye asesoramiento financiero. Los mercados son impredecibles.
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import os
import json
from typing import Dict, List, Tuple, Optional

# Importar sistema avanzado
try:
    from prediccion_avanzada import AnalizadorPredictivoAvanzado, ConfiguracionAvanzada
    SISTEMA_AVANZADO_DISPONIBLE = True
except ImportError:
    SISTEMA_AVANZADO_DISPONIBLE = False
    print("‚ö†Ô∏è Sistema avanzado no disponible. Usando modo b√°sico.")

# Importar sistema original mejorado
from binance.client import Client
import matplotlib.pyplot as plt
from ta.volatility import BollingerBands
from ta.trend import MACD, SMAIndicator, EMAIndicator
from ta.momentum import RSIIndicator

class SistemaIntegradoPrediccion:
    """Sistema principal que integra an√°lisis b√°sico y avanzado"""
    
    def __init__(self):
        self.config = self._cargar_configuracion()
        self.client = None
        self.analizador_avanzado = None
        self.resultados_historicos = {}
        
        self._inicializar_sistemas()
    
    def _cargar_configuracion(self):
        """Carga configuraci√≥n desde archivo o usa defaults"""
        config_default = {
            'api_key': "26Sh06jOHDKVRqZY5puDa7q16hQ1CU0aitWM0OWy1iMF0jU8h8jqKqUFsxzLC5Ze",
            'api_secret': "yOWjPf3wHDuQbBJVKll3kDYGG6c57GiUgbdu6Xp79VnAG3dzC5AUMU4IDd3LhsnT",
            'news_api_key': "95a1ebc226f34eb38842c95fd4ce1932",
            'pares_analizar': [
                "BTCUSDT", "ETHUSDT", "SOLUSDT", "ADAUSDT",
                "DOGEUSDT", "SHIBUSDT", "PEPEUSDT", "WIFUSDT"
            ],
            'intervalo_datos': '1h',
            'periodo_historico': '30 day ago UTC',
            'horizontes_prediccion': [1, 4, 12, 24],  # horas
            'modo_avanzado': True,
            'guardar_resultados': True,
            'mostrar_graficos': True
        }
        
        # Intentar cargar desde archivo
        if os.path.exists('config.json'):
            try:
                with open('config.json', 'r') as f:
                    config_archivo = json.load(f)
                    config_default.update(config_archivo)
            except:
                pass
        
        return config_default
    
    def _inicializar_sistemas(self):
        """Inicializa conexiones y sistemas"""
        # Cliente Binance
        try:
            self.client = Client(self.config['api_key'], self.config['api_secret'])
            self.client.get_account()
            print("‚úÖ Binance conectado y autenticado")
        except:
            try:
                self.client = Client()
                print("‚ö†Ô∏è Binance en modo p√∫blico (sin autenticaci√≥n)")
            except:
                print("‚ùå Error conectando a Binance")
                return
        
        # Sistema avanzado
        if SISTEMA_AVANZADO_DISPONIBLE and self.config['modo_avanzado']:
            try:
                self.analizador_avanzado = AnalizadorPredictivoAvanzado()
                print("‚úÖ Sistema avanzado de ML activado")
            except Exception as e:
                print(f"‚ö†Ô∏è Error activando sistema avanzado: {e}")
                self.analizador_avanzado = None
    
    def analisis_completo_par(self, par: str) -> Dict:
        """Realiza an√°lisis completo de un par espec√≠fico"""
        print(f"\n{'='*60}")
        print(f"üîç AN√ÅLISIS COMPLETO PARA {par}")
        print(f"{'='*60}")
        
        resultado = {
            'par': par,
            'timestamp': datetime.now(),
            'analisis_basico': {},
            'analisis_avanzado': {},
            'predicciones': {},
            'recomendaciones': {},
            'score_final': 50
        }
        
        # 1. Obtener datos hist√≥ricos
        print("üìä Obteniendo datos hist√≥ricos...")
        df = self._obtener_datos_historicos(par)
        
        if df.empty:
            print(f"‚ùå No se pudieron obtener datos para {par}")
            return resultado
        
        # 2. An√°lisis t√©cnico b√°sico
        print("üîß Realizando an√°lisis t√©cnico b√°sico...")
        resultado['analisis_basico'] = self._analisis_tecnico_basico(df)
        
        # 3. An√°lisis avanzado con ML (si est√° disponible)
        if self.analizador_avanzado:
            print("ü§ñ Ejecutando an√°lisis avanzado con ML...")
            try:
                analisis_avanzado = self.analizador_avanzado.hacer_prediccion_completa(par)
                if analisis_avanzado:
                    resultado['analisis_avanzado'] = analisis_avanzado
                    resultado['predicciones'] = analisis_avanzado['predicciones']
                    resultado['score_final'] = analisis_avanzado['score']['score_final']
            except Exception as e:
                print(f"‚ö†Ô∏è Error en an√°lisis avanzado: {e}")
        
        # 4. Generar recomendaciones integradas
        print("üí° Generando recomendaciones...")
        resultado['recomendaciones'] = self._generar_recomendaciones_integradas(resultado)
        
        # 5. Guardar resultados si est√° configurado
        if self.config['guardar_resultados']:
            self._guardar_resultado(resultado)
        
        # 6. Mostrar reporte
        self._mostrar_reporte_integrado(resultado)
        
        # 7. Generar gr√°ficos si est√° configurado
        if self.config['mostrar_graficos']:
            self._generar_graficos_integrados(df, resultado)
        
        return resultado
    
    def _obtener_datos_historicos(self, par: str) -> pd.DataFrame:
        """Obtiene datos hist√≥ricos mejorados"""
        try:
            klines = self.client.get_historical_klines(
                par, 
                self.config['intervalo_datos'], 
                self.config['periodo_historico'],
                limit=1000
            )
            
            if not klines:
                return pd.DataFrame()
            
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_volume',
                'taker_buy_quote_volume', 'ignore'
            ])
            
            # Conversiones mejoradas
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            numeric_cols = ['open', 'high', 'low', 'close', 'volume', 'quote_volume']
            
            for col in numeric_cols:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            df.dropna(inplace=True)
            df.set_index('timestamp', inplace=True)
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error obteniendo datos: {e}")
            return pd.DataFrame()
    
    def _analisis_tecnico_basico(self, df: pd.DataFrame) -> Dict:
        """An√°lisis t√©cnico mejorado"""
        if len(df) < 50:
            return {'error': 'Datos insuficientes'}
        
        analisis = {}
        
        try:
            # Precios actuales
            precio_actual = df['close'].iloc[-1]
            cambio_24h = (precio_actual - df['close'].iloc[-24]) / df['close'].iloc[-24] if len(df) >= 24 else 0
            
            analisis['precio'] = {
                'actual': precio_actual,
                'cambio_24h': cambio_24h,
                'maximo_24h': df['high'].tail(24).max() if len(df) >= 24 else df['high'].max(),
                'minimo_24h': df['low'].tail(24).min() if len(df) >= 24 else df['low'].min()
            }
            
            # Indicadores t√©cnicos
            # RSI
            rsi = RSIIndicator(df['close'], window=14).rsi()
            analisis['rsi'] = {
                'valor': rsi.iloc[-1] if not rsi.empty else 50,
                'estado': self._interpretar_rsi(rsi.iloc[-1] if not rsi.empty else 50)
            }
            
            # MACD
            macd_ind = MACD(df['close'])
            macd = macd_ind.macd()
            macd_signal = macd_ind.macd_signal()
            
            analisis['macd'] = {
                'macd': macd.iloc[-1] if not macd.empty else 0,
                'signal': macd_signal.iloc[-1] if not macd_signal.empty else 0,
                'divergencia': (macd.iloc[-1] - macd_signal.iloc[-1]) if not macd.empty and not macd_signal.empty else 0
            }
            
            # Medias m√≥viles
            sma_20 = SMAIndicator(df['close'], window=20).sma_indicator()
            sma_50 = SMAIndicator(df['close'], window=50).sma_indicator()
            ema_12 = EMAIndicator(df['close'], window=12).ema_indicator()
            
            analisis['medias'] = {
                'sma_20': sma_20.iloc[-1] if not sma_20.empty else precio_actual,
                'sma_50': sma_50.iloc[-1] if not sma_50.empty else precio_actual,
                'ema_12': ema_12.iloc[-1] if not ema_12.empty else precio_actual,
                'tendencia': self._determinar_tendencia(precio_actual, sma_20.iloc[-1] if not sma_20.empty else precio_actual, sma_50.iloc[-1] if not sma_50.empty else precio_actual)
            }
            
            # Bollinger Bands
            bb = BollingerBands(df['close'])
            bb_upper = bb.bollinger_hband()
            bb_lower = bb.bollinger_lband()
            
            analisis['bollinger'] = {
                'upper': bb_upper.iloc[-1] if not bb_upper.empty else precio_actual * 1.1,
                'lower': bb_lower.iloc[-1] if not bb_lower.empty else precio_actual * 0.9,
                'posicion': self._posicion_bollinger(precio_actual, bb_upper.iloc[-1] if not bb_upper.empty else precio_actual * 1.1, bb_lower.iloc[-1] if not bb_lower.empty else precio_actual * 0.9)
            }
            
            # Volumen
            vol_promedio = df['volume'].rolling(20).mean().iloc[-1]
            vol_actual = df['volume'].iloc[-1]
            
            analisis['volumen'] = {
                'actual': vol_actual,
                'promedio_20': vol_promedio,
                'ratio': vol_actual / vol_promedio if vol_promedio > 0 else 1,
                'interpretacion': 'Alto' if vol_actual > vol_promedio * 1.5 else 'Normal' if vol_actual > vol_promedio * 0.5 else 'Bajo'
            }
            
            # Score t√©cnico b√°sico
            analisis['score_tecnico'] = self._calcular_score_tecnico_basico(analisis)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis t√©cnico: {e}")
            analisis['error'] = str(e)
        
        return analisis
    
    def _interpretar_rsi(self, rsi: float) -> str:
        """Interpreta valores de RSI"""
        if rsi >= 70:
            return "Sobrecomprado"
        elif rsi <= 30:
            return "Sobrevendido"
        elif rsi > 50:
            return "Alcista"
        else:
            return "Bajista"
    
    def _determinar_tendencia(self, precio: float, sma_20: float, sma_50: float) -> str:
        """Determina tendencia basada en medias m√≥viles"""
        if precio > sma_20 > sma_50:
            return "Alcista Fuerte"
        elif precio > sma_20:
            return "Alcista"
        elif precio < sma_20 < sma_50:
            return "Bajista Fuerte"
        elif precio < sma_20:
            return "Bajista"
        else:
            return "Lateral"
    
    def _posicion_bollinger(self, precio: float, upper: float, lower: float) -> str:
        """Determina posici√≥n en Bollinger Bands"""
        if precio > upper:
            return "Por encima de banda superior"
        elif precio < lower:
            return "Por debajo de banda inferior"
        else:
            pct = (precio - lower) / (upper - lower)
            if pct > 0.8:
                return "Cerca de banda superior"
            elif pct < 0.2:
                return "Cerca de banda inferior"
            else:
                return "En zona media"
    
    def _calcular_score_tecnico_basico(self, analisis: Dict) -> float:
        """Calcula score t√©cnico b√°sico 0-100"""
        try:
            score = 50  # Base neutral
            
            # RSI
            rsi = analisis.get('rsi', {}).get('valor', 50)
            if rsi < 30:
                score += 15  # Oversold = bullish
            elif rsi > 70:
                score -= 15  # Overbought = bearish
            elif rsi > 50:
                score += 5
            else:
                score -= 5
            
            # MACD
            macd_div = analisis.get('macd', {}).get('divergencia', 0)
            if macd_div > 0:
                score += 10
            else:
                score -= 10
            
            # Tendencia
            tendencia = analisis.get('medias', {}).get('tendencia', 'Lateral')
            if 'Alcista Fuerte' in tendencia:
                score += 15
            elif 'Alcista' in tendencia:
                score += 10
            elif 'Bajista Fuerte' in tendencia:
                score -= 15
            elif 'Bajista' in tendencia:
                score -= 10
            
            # Volumen
            vol_ratio = analisis.get('volumen', {}).get('ratio', 1)
            if vol_ratio > 1.5:
                score += 5  # Alto volumen refuerza la se√±al
            
            return max(0, min(100, score))
            
        except:
            return 50
    
    def _generar_recomendaciones_integradas(self, resultado: Dict) -> Dict:
        """Genera recomendaciones combinando an√°lisis b√°sico y avanzado"""
        recomendaciones = {
            'se√±al_principal': 'NEUTRAL',
            'confianza': 0.5,
            'horizonte_optimo': '4h',
            'precio_objetivo': None,
            'stop_loss': None,
            'take_profit': None,
            'razonamiento': []
        }
        
        try:
            # Score combinado
            score_basico = resultado.get('analisis_basico', {}).get('score_tecnico', 50)
            score_avanzado = resultado.get('score_final', 50)
            
            # Ponderaci√≥n: 40% b√°sico, 60% avanzado si disponible
            if self.analizador_avanzado and 'analisis_avanzado' in resultado:
                score_final = score_basico * 0.4 + score_avanzado * 0.6
                confianza = 0.8
            else:
                score_final = score_basico
                confianza = 0.6
            
            # Determinar se√±al principal
            if score_final >= 70:
                recomendaciones['se√±al_principal'] = 'COMPRA FUERTE'
                recomendaciones['confianza'] = confianza * 0.9
            elif score_final >= 60:
                recomendaciones['se√±al_principal'] = 'COMPRA'
                recomendaciones['confianza'] = confianza * 0.8
            elif score_final >= 55:
                recomendaciones['se√±al_principal'] = 'COMPRA D√âBIL'
                recomendaciones['confianza'] = confianza * 0.6
            elif score_final <= 30:
                recomendaciones['se√±al_principal'] = 'VENTA FUERTE'
                recomendaciones['confianza'] = confianza * 0.9
            elif score_final <= 40:
                recomendaciones['se√±al_principal'] = 'VENTA'
                recomendaciones['confianza'] = confianza * 0.8
            elif score_final <= 45:
                recomendaciones['se√±al_principal'] = 'VENTA D√âBIL'
                recomendaciones['confianza'] = confianza * 0.6
            else:
                recomendaciones['se√±al_principal'] = 'NEUTRAL'
                recomendaciones['confianza'] = 0.5
            
            # Calcular niveles de precio
            precio_actual = resultado.get('analisis_basico', {}).get('precio', {}).get('actual', 0)
            if precio_actual > 0:
                if 'COMPRA' in recomendaciones['se√±al_principal']:
                    recomendaciones['precio_objetivo'] = precio_actual * 1.05  # +5%
                    recomendaciones['stop_loss'] = precio_actual * 0.97  # -3%
                    recomendaciones['take_profit'] = precio_actual * 1.10  # +10%
                elif 'VENTA' in recomendaciones['se√±al_principal']:
                    recomendaciones['precio_objetivo'] = precio_actual * 0.95  # -5%
                    recomendaciones['stop_loss'] = precio_actual * 1.03  # +3%
                    recomendaciones['take_profit'] = precio_actual * 0.90  # -10%
            
            # Razonamiento
            recomendaciones['razonamiento'] = self._generar_razonamiento(resultado, score_final)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando recomendaciones: {e}")
        
        return recomendaciones
    
    def _generar_razonamiento(self, resultado: Dict, score: float) -> List[str]:
        """Genera razonamiento de la recomendaci√≥n"""
        razones = []
        
        try:
            # An√°lisis b√°sico
            analisis_basico = resultado.get('analisis_basico', {})
            
            # RSI
            rsi_data = analisis_basico.get('rsi', {})
            if rsi_data.get('valor', 50) < 30:
                razones.append("RSI en zona de sobreventa (oportunidad de compra)")
            elif rsi_data.get('valor', 50) > 70:
                razones.append("RSI en zona de sobrecompra (precauci√≥n)")
            
            # Tendencia
            tendencia = analisis_basico.get('medias', {}).get('tendencia', '')
            if 'Alcista' in tendencia:
                razones.append(f"Tendencia {tendencia.lower()} confirmada por medias m√≥viles")
            elif 'Bajista' in tendencia:
                razones.append(f"Tendencia {tendencia.lower()} confirmada por medias m√≥viles")
            
            # MACD
            macd_div = analisis_basico.get('macd', {}).get('divergencia', 0)
            if macd_div > 0:
                razones.append("MACD muestra momentum alcista")
            elif macd_div < 0:
                razones.append("MACD muestra momentum bajista")
            
            # Volumen
            vol_interp = analisis_basico.get('volumen', {}).get('interpretacion', '')
            if vol_interp == 'Alto':
                razones.append("Volumen alto confirma el movimiento")
            
            # Score general
            if score >= 70:
                razones.append("Score t√©cnico muy alcista")
            elif score <= 30:
                razones.append("Score t√©cnico muy bajista")
            
            # An√°lisis avanzado si disponible
            if 'analisis_avanzado' in resultado:
                razones.append("Confirmado por an√°lisis de Machine Learning")
            
        except:
            razones.append("An√°lisis basado en indicadores t√©cnicos est√°ndar")
        
        return razones[:5]  # Limitar a 5 razones principales
    
    def _mostrar_reporte_integrado(self, resultado: Dict):
        """Muestra reporte completo integrado"""
        par = resultado['par']
        timestamp = resultado['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"\n{'='*80}")
        print(f"üìã REPORTE INTEGRADO PARA {par}")
        print(f"üìÖ Generado: {timestamp}")
        print(f"{'='*80}")
        
        # Informaci√≥n de precio
        precio_data = resultado.get('analisis_basico', {}).get('precio', {})
        if precio_data:
            print(f"\nüí∞ INFORMACI√ìN DE PRECIO:")
            print(f"   ‚Ä¢ Precio Actual: ${precio_data.get('actual', 0):.4f}")
            print(f"   ‚Ä¢ Cambio 24h: {precio_data.get('cambio_24h', 0):.2%}")
            print(f"   ‚Ä¢ M√°ximo 24h: ${precio_data.get('maximo_24h', 0):.4f}")
            print(f"   ‚Ä¢ M√≠nimo 24h: ${precio_data.get('minimo_24h', 0):.4f}")
        
        # An√°lisis t√©cnico
        analisis_basico = resultado.get('analisis_basico', {})
        if analisis_basico:
            print(f"\nüìä AN√ÅLISIS T√âCNICO B√ÅSICO:")
            
            rsi_data = analisis_basico.get('rsi', {})
            print(f"   ‚Ä¢ RSI: {rsi_data.get('valor', 0):.1f} ({rsi_data.get('estado', 'N/A')})")
            
            macd_data = analisis_basico.get('macd', {})
            print(f"   ‚Ä¢ MACD: {macd_data.get('macd', 0):.4f} | Signal: {macd_data.get('signal', 0):.4f}")
            
            medias_data = analisis_basico.get('medias', {})
            print(f"   ‚Ä¢ Tendencia: {medias_data.get('tendencia', 'N/A')}")
            
            bb_data = analisis_basico.get('bollinger', {})
            print(f"   ‚Ä¢ Bollinger: {bb_data.get('posicion', 'N/A')}")
            
            vol_data = analisis_basico.get('volumen', {})
            print(f"   ‚Ä¢ Volumen: {vol_data.get('interpretacion', 'N/A')} (Ratio: {vol_data.get('ratio', 0):.2f})")
            
            print(f"   ‚Ä¢ Score T√©cnico: {analisis_basico.get('score_tecnico', 50):.1f}/100")
        
        # Predicciones avanzadas
        if 'predicciones' in resultado and resultado['predicciones']:
            print(f"\nüîÆ PREDICCIONES AVANZADAS (ML):")
            for horizonte, pred in resultado['predicciones'].items():
                if 'precio_predicho' in pred:
                    cambio = pred.get('cambio_esperado', 0) * 100
                    print(f"   ‚Ä¢ {horizonte.upper()}: ${pred.get('precio_predicho', 0):.4f} ({cambio:+.2f}%) - Confianza: {pred.get('confianza', 0):.1%}")
        
        # Recomendaciones
        recom = resultado.get('recomendaciones', {})
        if recom:
            print(f"\nüéØ RECOMENDACI√ìN PRINCIPAL:")
            print(f"   ‚Ä¢ Se√±al: {recom.get('se√±al_principal', 'NEUTRAL')}")
            print(f"   ‚Ä¢ Confianza: {recom.get('confianza', 0):.1%}")
            
            if recom.get('precio_objetivo'):
                print(f"   ‚Ä¢ Precio Objetivo: ${recom.get('precio_objetivo', 0):.4f}")
                print(f"   ‚Ä¢ Stop Loss: ${recom.get('stop_loss', 0):.4f}")
                print(f"   ‚Ä¢ Take Profit: ${recom.get('take_profit', 0):.4f}")
            
            razones = recom.get('razonamiento', [])
            if razones:
                print(f"   ‚Ä¢ Razonamiento:")
                for razon in razones:
                    print(f"     - {razon}")
        
        # Score final
        print(f"\n‚≠ê SCORE FINAL: {resultado.get('score_final', 50):.1f}/100")
        
        print(f"\n{'='*80}")
    
    def _generar_graficos_integrados(self, df: pd.DataFrame, resultado: Dict):
        """Genera gr√°ficos integrados mejorados"""
        try:
            par = resultado['par']
            
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'An√°lisis T√©cnico Integrado - {par}', fontsize=16, fontweight='bold')
            
            # Gr√°fico 1: Precio y Medias M√≥viles
            ax1.plot(df.index, df['close'], label='Precio', color='blue', linewidth=2)
            
            # Calcular medias para el gr√°fico
            sma_20 = df['close'].rolling(20).mean()
            sma_50 = df['close'].rolling(50).mean()
            
            ax1.plot(df.index, sma_20, label='SMA 20', color='orange', alpha=0.7)
            ax1.plot(df.index, sma_50, label='SMA 50', color='red', alpha=0.7)
            
            ax1.set_title('Precio y Medias M√≥viles')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # Gr√°fico 2: RSI
            rsi = RSIIndicator(df['close']).rsi()
            ax2.plot(df.index, rsi, label='RSI', color='purple')
            ax2.axhline(y=70, color='r', linestyle='--', alpha=0.7, label='Sobrecompra')
            ax2.axhline(y=30, color='g', linestyle='--', alpha=0.7, label='Sobreventa')
            ax2.axhline(y=50, color='gray', linestyle=':', alpha=0.5)
            ax2.set_title('RSI (14)')
            ax2.set_ylim(0, 100)
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            # Gr√°fico 3: MACD
            macd_ind = MACD(df['close'])
            macd = macd_ind.macd()
            macd_signal = macd_ind.macd_signal()
            macd_hist = macd_ind.macd_diff()
            
            ax3.plot(df.index, macd, label='MACD', color='blue')
            ax3.plot(df.index, macd_signal, label='Signal', color='red')
            ax3.bar(df.index, macd_hist, label='Histogram', alpha=0.3, color='gray')
            ax3.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax3.set_title('MACD')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # Gr√°fico 4: Volumen
            ax4.bar(df.index, df['volume'], alpha=0.6, color='cyan')
            vol_ma = df['volume'].rolling(20).mean()
            ax4.plot(df.index, vol_ma, color='red', label='Vol MA 20')
            ax4.set_title('Volumen')
            ax4.legend()
            ax4.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando gr√°ficos: {e}")
    
    def _guardar_resultado(self, resultado: Dict):
        """Guarda resultado en archivo JSON"""
        try:
            if not os.path.exists('resultados'):
                os.makedirs('resultados')
            
            timestamp = resultado['timestamp'].strftime('%Y%m%d_%H%M%S')
            filename = f"resultados/{resultado['par']}_{timestamp}.json"
            
            # Preparar datos para JSON (convertir datetime, etc.)
            resultado_json = resultado.copy()
            resultado_json['timestamp'] = timestamp
            
            with open(filename, 'w') as f:
                json.dump(resultado_json, f, indent=2, default=str)
            
            print(f"üíæ Resultado guardado: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error guardando resultado: {e}")
    
    def ejecutar_analisis_completo(self):
        """Ejecuta an√°lisis completo para todos los pares configurados"""
        print("üöÄ INICIANDO SISTEMA INTEGRADO DE AN√ÅLISIS")
        print("="*80)
        print(f"üîß Modo Avanzado: {'‚úÖ Activo' if self.analizador_avanzado else '‚ùå Inactivo'}")
        print(f"üìä Pares a analizar: {len(self.config['pares_analizar'])}")
        print(f"‚è∞ Horizontes de predicci√≥n: {self.config['horizontes_prediccion']} horas")
        print("="*80)
        
        resultados_completos = {}
        
        for i, par in enumerate(self.config['pares_analizar'], 1):
            print(f"\nüîç [{i}/{len(self.config['pares_analizar'])}] Procesando {par}...")
            
            try:
                resultado = self.analisis_completo_par(par)
                resultados_completos[par] = resultado
                
                # Pausa entre an√°lisis
                if i < len(self.config['pares_analizar']):
                    time.sleep(3)
                    
            except Exception as e:
                print(f"‚ùå Error procesando {par}: {e}")
                continue
        
        # Generar resumen final
        self._generar_resumen_final(resultados_completos)
        
        return resultados_completos
    
    def _generar_resumen_final(self, resultados: Dict):
        """Genera resumen final de todos los an√°lisis"""
        if not resultados:
            print("‚ùå No hay resultados para resumir")
            return
        
        print(f"\n{'='*80}")
        print("üìä RESUMEN FINAL DEL MERCADO")
        print(f"{'='*80}")
        
        # Ranking por score
        ranking = []
        for par, resultado in resultados.items():
            score = resultado.get('score_final', 50)
            recom = resultado.get('recomendaciones', {}).get('se√±al_principal', 'NEUTRAL')
            ranking.append((par, score, recom))
        
        ranking.sort(key=lambda x: x[1], reverse=True)
        
        print("\nüèÜ RANKING POR SCORE PREDICTIVO:")
        for i, (par, score, recom) in enumerate(ranking, 1):
            emoji = "üü¢" if "COMPRA" in recom else "üî¥" if "VENTA" in recom else "‚ö™"
            print(f"{i:2d}. {par:10s} - {score:5.1f}/100 - {emoji} {recom}")
        
        # Estad√≠sticas
        scores = [r[1] for r in ranking]
        print(f"\nüìà ESTAD√çSTICAS GENERALES:")
        print(f"   ‚Ä¢ Score Promedio: {np.mean(scores):.1f}")
        print(f"   ‚Ä¢ Score M√°ximo: {max(scores):.1f} ({ranking[0][0]})")
        print(f"   ‚Ä¢ Score M√≠nimo: {min(scores):.1f} ({ranking[-1][0]})")
        
        # Distribuci√≥n de se√±ales
        senales = [r[2] for r in ranking]
        compras = len([s for s in senales if "COMPRA" in s])
        ventas = len([s for s in senales if "VENTA" in s])
        neutrales = len([s for s in senales if s == "NEUTRAL"])
        
        print(f"   ‚Ä¢ Se√±ales de Compra: {compras}")
        print(f"   ‚Ä¢ Se√±ales de Venta: {ventas}")
        print(f"   ‚Ä¢ Se√±ales Neutrales: {neutrales}")
        
        # Sentimiento general
        avg_score = np.mean(scores)
        if avg_score >= 65:
            sentimiento = "MUY BULLISH üöÄ"
        elif avg_score >= 55:
            sentimiento = "BULLISH üìà"
        elif avg_score >= 45:
            sentimiento = "NEUTRAL ‚û°Ô∏è"
        elif avg_score >= 35:
            sentimiento = "BEARISH üìâ"
        else:
            sentimiento = "MUY BEARISH üí•"
        
        print(f"   ‚Ä¢ Sentimiento General: {sentimiento}")
        
        print(f"\n‚ö†Ô∏è RECORDATORIO IMPORTANTE:")
        print("Este an√°lisis es para fines educativos √∫nicamente.")
        print("NO constituye asesoramiento financiero.")
        print("Los mercados de criptomonedas son altamente vol√°tiles y riesgosos.")
        print("Siempre realiza tu propia investigaci√≥n (DYOR) antes de invertir.")
        
        print(f"\n{'='*80}")


def main():
    """Funci√≥n principal del sistema integrado"""
    print("üîÆ SISTEMA INTEGRADO DE AN√ÅLISIS Y PREDICCI√ìN DE CRIPTOMONEDAS")
    print("Desarrollado por AI Expert Developer & Economist")
    print("Versi√≥n 2.0 - An√°lisis T√©cnico + Machine Learning")
    print("="*80)
    
    try:
        # Crear sistema integrado
        sistema = SistemaIntegradoPrediccion()
        
        # Ejecutar an√°lisis completo
        resultados = sistema.ejecutar_analisis_completo()
        
        print(f"\n‚úÖ An√°lisis completado exitosamente")
        print(f"üìä {len(resultados)} pares procesados")
        print("üí° Revisa los reportes detallados arriba")
        
        if sistema.config['guardar_resultados']:
            print("üíæ Resultados guardados en carpeta 'resultados/'")
        
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è An√°lisis interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error en el sistema: {e}")
        print("üîß Verifica la configuraci√≥n y conexiones")


if __name__ == "__main__":
    main() 